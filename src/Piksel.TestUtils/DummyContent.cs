using System;
using System.IO;
using System.Text;
using Piksel.Testing.Content;

namespace Piksel.Testing
{
    /// <summary>
    /// A content provider that can supply test data to files or streams, use static helpers for builtin content providers
    /// </summary>
    public abstract class DummyContent
    {
        private static EmptyDummyContent empty;
        private static SomeDummyContent any;

        /// <summary>
        /// Writes nothing
        /// </summary>
        public static DummyContent Empty => empty ?? (empty = new EmptyDummyContent());

        /// <summary>
        /// Writes some generic unique 16 bytes of content
        /// </summary>
        /// <remarks>"Unique" because it's based on the current  ticks. Although unlikely, might return the same value in a multi-threaded setup</remarks>
        public static DummyContent Any => any ?? (any = new SomeDummyContent());

        /// <summary>
        /// Writes <paramref name="size"/> randomly generated bytes
        /// </summary>
        /// <param name="size">Number of bytes to write</param>
        public static DummyContent RandomBytes(int size) => new RandomBytesDummyContent(size);

        /// <summary>
        /// Writes the <paramref name="content"/> bytes
        /// </summary>
        /// <param name="content"></param>
        public static DummyContent Bytes(byte[] content) => new BytesDummyContent(content);

        /// <summary>
        /// Writes the <paramref name="content"/> string using UTF-8 encoding
        /// </summary>
        /// <param name="content"></param>
        /// <returns></returns>
        public static DummyContent Utf8String(string content) => new StringDummyContent(content);

        /// <summary>
        /// Writes the <paramref name="content"/> string using <paramref name="encoding"/>
        /// </summary>
        /// <param name="content"></param>
        /// <param name="encoding"></param>
        public static DummyContent String(string content, Encoding encoding) => new StringDummyContent(content, encoding);

        /// <summary>
        /// Writes the content to <paramref name="stream"/>
        /// </summary>
        /// <param name="stream"></param>
        public abstract void WriteToStream(Stream stream);
    }

}